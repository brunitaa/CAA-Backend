generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  female
  male
  other
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique

  users User[]
}

model User {
  id                Int                @id @default(autoincrement())
  username          String             @unique
  gender            Gender?
  age               Int?
  roleId            Int
  role              Role               @relation(fields: [roleId], references: [id])
  isActive          Boolean            @default(true)
  lastLogin         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?

  allowCustomization Boolean           @default(false)

  auth              UserAuth?
  pictograms        Pictogram[]        @relation("PictogramOwner")
  createdPictograms Pictogram[]        @relation("PictogramCreator")
  caregiverSpeakersCaregiver CaregiverSpeaker[] @relation("CaregiverRelation")
  caregiverSpeakersSpeaker   CaregiverSpeaker[] @relation("SpeakerRelation")
  grids             Grid[]
  createdGrids      Grid[]             @relation("GridCreator")
  images            Image[]
  sentences         Sentence[]
  sessions          UserSession[]
  statistics        UserStatistics?
  mlTrainingData    MLTrainingData[]
  mlPredictions     MLPrediction[]
  mlModels          MLModelMetadata[]  @relation("ModelTrainer")
  authTokens        AuthToken[]
  validatedTrainingData MLTrainingData[] @relation("TrainingValidator")

  speakerSettingsAsCaregiver SpeakerSettings[] @relation("SpeakerSettingsCaregiver")
  speakerSettingsAsSpeaker  SpeakerSettings[] @relation("SpeakerSettingsSpeaker")
    userPictogramUsages UserPictogramUsage[]

}

model UserAuth {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  email          String   @unique
  emailConfirmed Boolean  @default(false)
  passwordHash   String
  passwordSalt   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime?

  user User @relation(fields: [userId], references: [id])
}

model CaregiverSpeaker {
  id          Int   @id @default(autoincrement())
  caregiverId Int
  speakerId   Int
  createdAt   DateTime @default(now())

  caregiver User @relation("CaregiverRelation", fields: [caregiverId], references: [id])
  speaker   User @relation("SpeakerRelation", fields: [speakerId], references: [id])

  @@unique([caregiverId, speakerId])
}

model SpeakerSettings {
  id                  Int      @id @default(autoincrement())
  speakerId           Int
  caregiverId         Int
  mlEnabled           Boolean  @default(true)
  canEditPictograms   Boolean  @default(true)
  canEditGrids        Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime?

  speaker   User @relation("SpeakerSettingsSpeaker", fields: [speakerId], references: [id])
  caregiver User @relation("SpeakerSettingsCaregiver", fields: [caregiverId], references: [id])

  @@unique([speakerId, caregiverId])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  filesize  Int?
  height    Int?
  width     Int?
  mimeType  String?
  userId    Int?
  createdAt DateTime @default(now())

  user       User?       @relation(fields: [userId], references: [id])
  pictograms Pictogram[]
}

model Grid {
  id            Int      @id @default(autoincrement())
  userId        Int?
  createdBy     Int?
  name          String
  description   String?
  isActive      Boolean  @default(true)
  deletedAt     DateTime?
  isDefault     Boolean  @default(false)
  isGlobal      Boolean  @default(false)
  createdAt     DateTime @default(now())

  user          User? @relation(fields: [userId], references: [id])
  createdByUser User? @relation("GridCreator", fields: [createdBy], references: [id])
  gridPictograms GridPictogram[]
}

model GridPictogram {
  id          Int    @id @default(autoincrement())
  gridId      Int
  pictogramId Int
  position    Int
  createdAt   DateTime @default(now())

  grid      Grid      @relation(fields: [gridId], references: [id])
  pictogram Pictogram @relation(fields: [pictogramId], references: [id])

  @@unique([gridId, pictogramId])
  @@unique([gridId, position])
}

model PartOfSpeech {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String
  description String?
  color       String    

  pictogramPos PictogramPos[]
}

model Pictogram {
  id             Int               @id @default(autoincrement())
  name           String
  imageId        Int?
  userId         Int?
  user           User?             @relation("PictogramOwner", fields: [userId], references: [id])
  lemma          String?

  createdBy      Int
  creator        User              @relation("PictogramCreator", fields: [createdBy], references: [id])

  usageFrequency BigInt            @default(0)
  isActive       Boolean           @default(true)
  deletedAt      DateTime?
  isMultiword    Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?

  image          Image?            @relation(fields: [imageId], references: [id])
  pictogramPos   PictogramPos[]
  gridPictograms GridPictogram[]
  mlTraining     MLTrainingData[]
  predictedBy    MLPrediction[]    @relation("PredictedPictogramRelation")
  actualFor      MLPrediction[]    @relation("ActualPictogramRelation")
  statisticsFav  UserStatistics?   @relation("FavoritePictogram")

  originalId     Int?
  original       Pictogram?        @relation("PictogramBaseRelation", fields: [originalId], references: [id])
  derived        Pictogram[]       @relation("PictogramBaseRelation")
    userPictogramUsages UserPictogramUsage[]

}

model PictogramPos {
  id          Int       @id @default(autoincrement())
  pictogramId Int
  posId       Int
  isPrimary   Boolean   @default(false)
  source      String?
  createdAt   DateTime  @default(now())

  pictogram   Pictogram   @relation(fields: [pictogramId], references: [id])
  pos         PartOfSpeech @relation(fields: [posId], references: [id])

  @@unique([pictogramId, posId])
}
model UserPictogramUsage {
  id            Int        @id @default(autoincrement())
  userId        Int
  pictogramId   Int
  usageCount    Int        @default(0)
  lastUsedAt    DateTime   @default(now())

  user          User       @relation(fields: [userId], references: [id])
  pictogram     Pictogram  @relation(fields: [pictogramId], references: [id])

  @@unique([userId, pictogramId])
}



model Sentence {
  id              Int      @id @default(autoincrement())
  userId          Int
  telegraphicText String
  meta            Json?
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model UserSession {
  id              Int      @id @default(autoincrement())
  userId          Int
  startedAt       DateTime @default(now())
  endedAt         DateTime?
  durationSeconds Int?
  deviceInfo      String?

  user User @relation(fields: [userId], references: [id])
}

model UserStatistics {
  id                  Int        @id @default(autoincrement())
  userId              Int        @unique
  user                User       @relation(fields: [userId], references: [id])
  totalSessions       Int        @default(0)
  totalSentences      Int        @default(0)
  totalPictogramsUsed Int        @default(0)
  lastActive          DateTime?
  favoritePictogramId Int?       @unique
  favoritePictogram   Pictogram? @relation("FavoritePictogram", fields: [favoritePictogramId], references: [id])
  updatedAt           DateTime?
}

model MLModelMetadata {
  id           Int       @id @default(autoincrement())
  name         String
  version      String    @unique
  description  String?
  framework    String    @default("PyTorch")
  architecture String    @default("MiniBERT")
  hyperparams  Json?
  metrics      Json?
  trainedAt    DateTime  @default(now())
  trainedBy    Int?
  user         User?     @relation("ModelTrainer", fields: [trainedBy], references: [id])
  storagePath  String?
  isDeployed   Boolean   @default(false)
  notes        String?

  trainingData MLTrainingData[]
  predictions  MLPrediction[]
}

model MLTrainingData {
  id              Int      @id @default(autoincrement())
  userId          Int
  sequence        Json
  nextPictogramId Int?
  context         Json?
  modelVersion    String?
  modelId         Int?
  isValidated     Boolean   @default(false)
  validatedBy     Int?
  validatedAt     DateTime?

  user            User       @relation(fields: [userId], references: [id])
  nextPictogram   Pictogram? @relation(fields: [nextPictogramId], references: [id])
  model           MLModelMetadata? @relation(fields: [modelId], references: [id])
  validator       User?      @relation("TrainingValidator", fields: [validatedBy], references: [id])

  createdAt       DateTime   @default(now())

  @@index([userId, createdAt])
  @@index([modelId])
}

model MLPrediction {
  id                   Int        @id @default(autoincrement())
  userId               Int
  predictedPictogramId Int
  actualPictogramId    Int?
  context              Json
  modelId              Int?
  createdAt            DateTime   @default(now())

  user               User       @relation(fields: [userId], references: [id])
  predictedPictogram Pictogram  @relation("PredictedPictogramRelation", fields: [predictedPictogramId], references: [id])
  actualPictogram    Pictogram? @relation("ActualPictogramRelation", fields: [actualPictogramId], references: [id])
  model              MLModelMetadata? @relation(fields: [modelId], references: [id])

  @@index([userId, createdAt])
  @@index([modelId])
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  tokenHash String   @unique
  purpose   String
  meta      Json?
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
